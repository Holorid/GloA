import os
import jsonpickle

class FileProvider:
    def get(self, path):
        file = open(path, 'r')
        data = file.read()
        file.close()
        return data
        
    def wappend(self, path, data, mode='w'):
        file = open(path, mode)
        data = file.writelines(data)
        file.close()

    def exists(self, path):
        return os.path.exists(path)

class SchoolStorage:
    def __init__(self):
        self.file_name = 'school.json'
    
    def get_all_school(self):
        if not file_provider.exists(self.file_name):
            school = [SchoolCre('Школа 1', 'Гагарина 43')]
            self.save_questions(school)
    
        data = file_provider.get(self.file_name)
        school = jsonpickle.decode(data)
        return school
        
    def get_school(self, name, address):
        schools = self.get_all_school()
        for school in schools:
            if school.name == name or school.address == address:
                return school
            
        school = SchoolCre(name, address)
        self.add(school)
        return school
    
    def save_questions(self, school):
        json_data = jsonpickle.encode(school)
        file_provider.wappend(self.file_name, json_data)
    
    def add(self, school):
        new_school = self.get_all_school()
        new_school.append(school)
        self.save_questions(new_school)

class SchoolCre:
    def __init__(self, name, address, count_schoolboy=0):
        self.name = name
        self.address = address
        self.count_schoolboy = count_schoolboy

class Student:
    def __init__(self, number, name, age, class_number, school):
        self.number = number
        self.name = name
        self.age = age
        self.class_number = class_number
        self.school = school
        
class StudentsStorage:
    def __init__(self):
        self.file_name = 'students.json'

    def save(self, student):
        json_data = jsonpickle.encode(student)
        file_provider.wappend(self.file_name, json_data)
        
    def add_student(self, student):
        students = self.get_all()
        students.append(student)
        self.save(students)
        
    def delet(self, index):
        students = self.get_all()
        print(f'Ученик {students[index].name} удален')
        students.pop(index)

        self.save(students)

    def get_all(self):
        if not file_provider.exists(self.file_name):
            students = []
            self.save(students)
        data = file_provider.get(self.file_name)
        students = jsonpickle.decode(data)
        return students

#Ученики
def student_info(school):
    number = 'Номер'
    full_name = 'ФИО ученика'
    age = 'Возраст'
    class_number = 'Номер класса'
    print(f'{number:20}{full_name:45}{age:15}{class_number:15}')

    students = studentsStorage.get_all()

    for i in range(len(students)):
        if students[i].school == school.name:
            print(f'{str(students[i].number):20}{students[i].name:45}{str(students[i].age):15}{str(students[i].class_number):15}')

def add_student(school):
    print('Напишите ФИО:')
    full_name_input = valid_input(3)
    print('Напишите возраст:')
    age_input = valid_input(1, 18)
    print('Напишите класс:')
    class_number_input = valid_input(2)
    
    students = studentsStorage.get_all()
    number = 1
    
    for i in range(len(students)):
        if students[i].school == school.name:
            number += 1
    
    studentsStorage.add_student(Student(number, full_name_input, age_input, class_number_input, school.name))
    
def del_student(school):
    print('Ученика:')
    students = studentsStorage.get_all()
    value = 0
   
    for i in range(len(students)):
        if students[i].school == school.name:
            print(f'№{i}: {students[i].name}')
            value += 1
        
    print('Введите номер ученика:')
    index = valid_input(1, value)
    studentsStorage.delet(index)
    

#Школа
def school_info(school):
    print(f'Название школы: {school.name}\nАдресс школы: {school.address}\nКоличество учеников: {school.count_schoolboy}')
    
def school_edit(school):
    print('Напишите новое название школы:')
    school_name_input = valid_input(3)
    print('Напишите новый адресс школы:')
    school_address_input = valid_input(3)
    
    new_school = schoolStorage.get_all_school()
    
    for i in range(len(new_school) - 1):
        if new_school[i].name == school.name or new_school[i].address == school.address:
            new_school[i] = SchoolCre(school_name_input, school_address_input, school.count_schoolboy)
    
    schoolStorage.save_questions(new_school)
    
def valid_input(mode, value=0):
    # mode 1 - проверка на числа
    # mode 3 - проверка на пустую строку
    while True:
        if mode == 1:
            user_in = input()
            if user_in.isdigit() and int(user_in) <= value and int(user_in) != 0:
                return int(user_in)
            else:
                print(f'Напишите корректную цифру')
                continue
           
        elif mode == 2:
            user_in = input()
            length = len(user_in)
            
            if user_in == '' and user_in == ' ':
                print('Введите корректную информацию')
                continue
            
            if length == 1:
                if user_in.isdigit() and int(user_in) <= 11 and int(user_in) != 0:
                    return user_in  
                    
            if length == 2:
                if user_in.isdigit() and int(user_in) <= 11 and int(user_in) != 0:
                    return user_in  
                
                if user_in[0].isdigit() and int(user_in[0]) <= 11 and int(user_in) != 0 and user_in[1] in 'АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЭЮЯ':
                    return user_in 
                    
            if length == 3:
                if user_in[0:2].isdigit() and int(user_in[0:2]) <= 11 and int(user_in) != 0 and user_in[2] in 'АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЭЮЯ':
                    return user_in
            
            print('Введите корректную информацию')
            continue
                
        elif mode == 3:
            user_in = input()
            if user_in == '' and user_in == ' ':
                print('Введите корректную информацию')
                continue
            else:
                return user_in

def star():
    print('Напишите название школы:')
    school_name_input = valid_input(3)
    print('Напишите адресс школы:')
    school_address_input = valid_input(3)
    
    school = schoolStorage.get_school(school_name_input, school_address_input)
    
    while True:
        print('---------------------------------')
        print('Выберите пункт:\n1.Информации о школе\n2.Измененить информацию о школе\n3.Просмотр учеников школы\n4.Добавление нового ученика\n5.Удаление ученика\n6.Выход из программы')
        print('---------------------------------')
        item_menu = valid_input(1, 6)
        if item_menu == 1:
            school_info(school)
        elif item_menu == 2:
            school_edit(school)
        elif item_menu == 3:
            student_info(school)
        elif item_menu == 4:
            add_student(school)
        elif item_menu == 5:
            del_student(school)
        elif item_menu == 6:
            break  
        else:
            continue
    
schoolStorage = SchoolStorage()
studentsStorage = StudentsStorage()
file_provider = FileProvider()

jsonpickle.set_encoder_options('json', indent=4,
                                separators=(',', ': '),
                                ensure_ascii=False)

star()
